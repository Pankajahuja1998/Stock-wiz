## importing libraries 
import pandas as pd
import matplotlib.pyplot as plt

## Getting three stocks from data downloaded by third party website Kaggle
infy = pd.read_csv("Data/INFY.csv")
itc = pd.read_csv("Data/ITC.csv")
lt = pd.read_csv("Data/LT.csv")

# Checking the data 
infy.head()

## For understanding i can see the size of data 

itc.shape

# Dtype (Data Types)
infy.info()

# So the data is in object will convert it to datetime for making it easy to call the function but before that we
# will filter the data by eliminating data null and duplicate values and make it more understandable
itc.isna().sum()

# So the variable who doesnt have 0, has null values we will not take them into consideration
# Now we will check the duplicates
itc.duplicated().sum()
infy.duplicated().sum()
lt.duplicated().sum()
# No duplicates

# Rounding the values
itc.describe().round(2)

# now converting dtype from object to date
itc["Date"] = pd.to_datetime(itc["Date"])
lt["Date"] = pd.to_datetime(lt["Date"])
infy["Date"] = pd.to_datetime(infy["Date"])

# eliminating the null values
itc=itc.drop(['Trades','Deliverable Volume','%Deliverble'], axis=1)
lt=lt.drop(['Trades','Deliverable Volume','%Deliverble'], axis=1)
infy=infy.drop(['Trades','Deliverable Volume','%Deliverble'], axis=1)

infy['Month']=infy["Date"].dt.month

infy['Year']=infy["Date"].dt.year

infy['Day']=infy["Date"].dt.day

itc['Month']=itc["Date"].dt.month

itc['Year']=itc["Date"].dt.year

itc['Day']=itc["Date"].dt.day

lt['Month']=lt["Date"].dt.month

lt['Year']=lt["Date"].dt.year

lt['Day']=lt["Date"].dt.day

## Plotting Charts

plt.figure(figsize=(20,7))

plt.plot(infy['Date'],infy['Open'],color='blue',label='INFY')

plt.plot(lt['Date'],lt['Open'],color='grey',label='L & T')

plt.plot(itc['Date'],itc['Open'],color='orange',label='ITC')

## Doing price comparsion

plt.title("Relation between INFY, ITC and L&T Price")

plt.xlabel("Year")

plt.ylabel("Price")

plt.legend(title="")

plt.show()

# Comparing Volumes

plt.figure(figsize=(20,7))

plt.plot(infy['Date'],infy['Volume'],color='blue',label='Tata Motors')

plt.plot(lt['Date'],lt['Volume'],color='grey',label='Tata Steel')

plt.plot(itc['Date'],itc['Volume'],color='orange',label='TCS')



plt.title("Relation between Volume")

plt.xlabel("Year")

plt.ylabel("Volume")

plt.legend(title="")

plt.show()

# Return on investmetns 
sumTM=0 #total amount invested in Infosys

s1=0 #number of shares owned by Infosys

#calcuating total amount invested and number of shares owned in Infosys

for i in range(len(infy)):

    if infy.loc[i,'Day']==30:

        sumTM+=infy.loc[i,'Open']

        s1+=1

#displaying results

print("Total Invested in Infosys = Rs",round(sumTM,2))

print("Shares Owned of Infosys =",s1)

print("Average Investmentment of 1 share = Rs",round((sumTM/s1),2))



tm_end=1346.30 #last open price of Infosys on 2021-04-30

#obtained by looking at the data or can be seen after executing infy.tail()

#calculating investment results

result1=round((tm_end*s1)-sumTM,2)

roiTM=round((result1/sumTM)*100,2)


#displaying investment results

print("nInvestment Result:")


if result1<0:

    print("Net Unrealised Loss = Rs",result1)

else:

    print("Net Unrealised Profit = Rs",result1)



print("Infosys ROI from 2000-1-3 to 2021-04-30 =",roiTM,"%")

# Return on investmetns 
sumlt=0 #total amount invested in L&T

s2=0 #number of shares owned by L&T

#calcuating total amount invested and number of shares owned in L&T

for i in range(len(lt)):

    if lt.loc[i,'Day']==30:

        sumlt+=lt.loc[i,'Open']

        s2+=1

#displaying results

print("Total Invested in L&T = Rs",round(sumlt,2))

print("Shares Owned of L&T =",s2)

print("Average Investmentment of 1 share = Rs",round((sumlt/s2),2))



lt_end=1350 #last open price of L&T on 2021-04-30

#obtained by looking at the data or can be seen after executing lt.tail()

#calculating investment results

result2=round((lt_end*s2)-sumlt,2)

roilt=round((result2/sumlt)*100,2)


#displaying investment results

print("nInvestment Result:")


if result2<0:

    print("Net Unrealised Loss = Rs",result2)

else:

    print("Net Unrealised Profit = Rs",result2)



print("L&T ROI from 2000-1-3 to 2021-04-30 =",roilt,"%")


# Return on investmetns 
sumitc=0 #total amount invested in ITC

s3=0 #number of shares owned by ITC

#calcuating total amount invested and number of shares owned in ITC

for i in range(len(lt)):

    if itc.loc[i,'Day']==30:

        sumitc+=itc.loc[i,'Open']

        s3+=1

#displaying results

print("Total Invested in ITC = Rs",round(sumitc,2))

print("Shares Owned of ITC =",s3)

print("Average Investmentment of 1 share = Rs",round((sumitc/s3),2))



itc_end=203.9 #last open price of L&T on 2021-04-30

#obtained by looking at the data or can be seen after executing itc.tail()

#calculating investment results

result3=round((itc_end*s3)-sumitc,2)

roiitc=round((result3/sumitc)*100,2)


#displaying investment results

print("nInvestment Result:")


if result3<0:

    print("Net Unrealised Loss = Rs",result3)

else:

    print("Net Unrealised Profit = Rs",result3)



print("ITC ROI from 2000-1-3 to 2021-04-30 =",roiitc,"%")

# ROI IN CHARTS

plt.figure(figsize=(5,7))

stock=['INFY','LT','ITC']

ROI=[roiTM,roilt,roiitc]

col=['Blue','Grey','Orange']




plt.bar(stock,ROI,color=col)




plt.title("ROI")

plt.xlabel("Stocks")

plt.ylabel("Percentage")


plt.figure(figsize=(5,7))

stock=['INFY','LT','ITC']

amt=[result1,result2,result3]

col=['Blue','Grey','Orange']




plt.bar(stock,amt,color=col)




plt.title("Profit/Loss")

plt.xlabel("Stocks")

plt.ylabel("Amount")


## Sector Allocation

plt.figure(figsize=(5,7))

sectors=['IT','Auto','FMCG']

shares=[s1,s2,s3]

col=['Blue','Grey','Orange']



plt.pie(shares,labels=sectors,autopct="%1.2f%%",colors=col)

plt.legend(title="",loc="upper left")

plt.title("Sector Allocation")

